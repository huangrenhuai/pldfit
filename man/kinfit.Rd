% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/kinfit.R
\name{kinfit}
\alias{kinfit}
\title{Fitting Protein-Ligand Sensorgram Data}
\usage{
kinfit(par, dat, concs = concs, t2 = t2, model = c("simple1to1", "dimer"),
  bound = NULL)
}
\arguments{
\item{par}{The initial parameters to be fitted.}

\item{dat}{A data frame. The first column in the data frame is "Time" followed
by the response (nm) recorded from a biosensor experiment or from a simulation
at the corresponding concentration of the ligand.}

\item{concs}{The oncentrations. It is usally a series of two-times dilution
of the ligand concentration.}

\item{t2}{The beggining of dissociation.}

\item{model}{The model. Choose the model from "simple1to1" or "dimer".}

\item{bound}{The upper and lower limits of the parameters used in fitting.
It should match with the corresponding parameters of par.}
}
\value{
the fitting results returned by minpack.lm::nls.lm
}
\description{
kinfit is used to fit kinetic data.
}
\examples{
# Simulation  ----------------------------------------------------------
Do a simulation first before the perform the following fitting.
\\code{\\link{kinsim}}


# Fit the simulated data into the corresponding model--------------------

# Prepare fitting parameters
initPar_test = list(kon =1, koff = 1, rmax = 1)
t2  = par$t2 # t2 is the beginning of the diassociation.
concs        = par$concs
dat          = xySimulated

fit <- kinfit(par = initPar_test, dat = dat, concs = concs, t2 = t2, model = "simple1to1")
names(fit)

cbind(simulation= par, init = initPar_test, fitting = fit$par)

# Predict  -------------------------------------------------------------
predFit <- kinsim(par = fit$par, model = model, noise = 0)


# Plot -----------------------------------------------------------------

# Plotting the simulation
xy <-reshape2::melt(data = xySimulated,
id.vars = "Time",
measure.vars = rev(1:6),
variable.name = "Conc")

g <- ggplot()  + xlab("Time (sec)") + ylab("Response (nm)") +
    labs(linetype= 'title') +
   ylim(-0.025,1) +
   theme_classic() +
   theme(legend.position=c(0.9, 0.65),
         legend.text=element_text(size = rel(1)),
         legend.key.size=unit(0.9,"line"));
g <- g + geom_line(data = xy, aes(x = Time, y = value, color = Conc));
print(g)

# Plotting the prediction from the fitted parameters
predFit <- reshape2::melt(predFit, id.vars = "Time")
g + geom_line(data=predFit, aes(x = Time, y = value, group = variable) )
}
\seealso{
\code{\link{kinsim}}
}

